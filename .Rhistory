labs(title = "Number of pixels histogram",
x = "Number of pixels",
y = "Frequency")
rows_with_1_hist <- ggplot(data = calculated_features, aes(rows_with_1)) +
geom_histogram(binwidth = 1, fill = "red") +
theme_bw() +
labs(title = "Rows with 1 pixel histogram",
x = "Number of rows with 1 pixel",
y = "Frequency")
cols_with_1_hist <- calculated_features %>%
ggplot(aes(cols_with_1))+
geom_histogram(binwidth = 1, fill = "red")+
theme_bw() +
labs(title = "Columns with 1 histogram",
x = "Number of columns with 1",
y = "Frequency")
rows_with_3p_hist <- calculated_features %>%
ggplot(aes(rows_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Rows with 3 pixels of more histogram",
x = "Number of rows with 3 pixels or more",
y = "Frequency")
cols_with_3p_hist <- calculated_features %>%
ggplot(aes(cols_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Columns with 3 pixels of more histogram",
x = "Number of columns with 3 pixels or more",
y = "Frequency")
aspect_ratio_hist <- calculated_features %>%
ggplot(aes(aspect_ratio))+
geom_histogram(binwidth = 0.1, fill = "orange")+
theme_bw() +
labs(title = "Aspect ratio histogram",
x = "Aspect ratios",
y = "Frequency")
print(nr_pix_hist)
print(rows_with_1_hist)
print(cols_with_1_hist)
print(rows_with_3p_hist)
print(cols_with_3p_hist)
print(aspect_ratio_hist)
}
histograms_3_1()
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
library(tidyverse)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
# This section of code read in the feature calculations created in sections 2 code adds
# csv seperated values to columns, and new lines create a new row in a data frame
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
calculated_features_col_names <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
colnames(calculated_features) <- calculated_features_col_names
# had to change custom function to numeric class as for some reason it was character
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.1
# plots histograms for the values for each of the features for each of the images
histograms_3_1 <- function(){
nr_pix_hist <- ggplot(data = calculated_features, aes(nr_pix))+
geom_histogram(binwidth = 2, fill = "grey")+
theme_bw() +
labs(title = "Number of pixels histogram",
x = "Number of pixels",
y = "Frequency")
rows_with_1_hist <- ggplot(data = calculated_features, aes(rows_with_1)) +
geom_histogram(binwidth = 1, fill = "red") +
theme_bw() +
labs(title = "Rows with 1 pixel histogram",
x = "Number of rows with 1 pixel",
y = "Frequency")
cols_with_1_hist <- calculated_features %>%
ggplot(aes(cols_with_1))+
geom_histogram(binwidth = 1, fill = "red")+
theme_bw() +
labs(title = "Columns with 1 histogram",
x = "Number of columns with 1",
y = "Frequency")
rows_with_3p_hist <- calculated_features %>%
ggplot(aes(rows_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Rows with 3 pixels of more histogram",
x = "Number of rows with 3 pixels or more",
y = "Frequency")
cols_with_3p_hist <- calculated_features %>%
ggplot(aes(cols_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Columns with 3 pixels of more histogram",
x = "Number of columns with 3 pixels or more",
y = "Frequency")
aspect_ratio_hist <- calculated_features %>%
ggplot(aes(aspect_ratio))+
geom_histogram(binwidth = 0.1, fill = "orange")+
theme_bw() +
labs(title = "Aspect ratio histogram",
x = "Aspect ratios",
y = "Frequency")
print(nr_pix_hist)
print(rows_with_1_hist)
print(cols_with_1_hist)
print(rows_with_3p_hist)
print(cols_with_3p_hist)
print(aspect_ratio_hist)
}
histograms_3_1()
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/section3_code.R", echo=TRUE)
?ggplot()
labs()
labs?
?labs
labs()
?labs()
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
devtools::install_github("benmarwick/wordcountaddin", type = "source", dependencies = TRUE)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
library(tidyverse)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
# This section of code read in the feature calculations created in sections 2 code adds
# csv seperated values to columns, and new lines create a new row in a data frame
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
calculated_features_col_names <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
colnames(calculated_features) <- calculated_features_col_names
# had to change custom function to numeric class as for some reason it was character
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.1
# plots histograms for the values for each of the features for each of the images
histograms_3_1 <- function(){
nr_pix_hist <- ggplot(data = calculated_features, aes(nr_pix))+
geom_histogram(binwidth = 2, fill = "grey")+
theme_bw() +
labs(title = "Number of pixels histogram",
x = "Number of pixels",
y = "Frequency")
rows_with_1_hist <- ggplot(data = calculated_features, aes(rows_with_1)) +
geom_histogram(binwidth = 1, fill = "red") +
theme_bw() +
labs(title = "Rows with 1 pixel histogram",
x = "Number of rows with 1 pixel",
y = "Frequency")
cols_with_1_hist <- calculated_features %>%
ggplot(aes(cols_with_1))+
geom_histogram(binwidth = 1, fill = "red")+
theme_bw() +
labs(title = "Columns with 1 histogram",
x = "Number of columns with 1",
y = "Frequency")
rows_with_3p_hist <- calculated_features %>%
ggplot(aes(rows_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Rows with 3 pixels of more histogram",
x = "Number of rows with 3 pixels or more",
y = "Frequency")
cols_with_3p_hist <- calculated_features %>%
ggplot(aes(cols_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Columns with 3 pixels of more histogram",
x = "Number of columns with 3 pixels or more",
y = "Frequency")
aspect_ratio_hist <- calculated_features %>%
ggplot(aes(aspect_ratio))+
geom_histogram(binwidth = 0.1, fill = "orange")+
theme_bw() +
labs(title = "Aspect ratio histogram",
x = "Aspect ratios",
y = "Frequency")
print(nr_pix_hist)
print(rows_with_1_hist)
print(cols_with_1_hist)
print(rows_with_3p_hist)
print(cols_with_3p_hist)
print(aspect_ratio_hist)
}
histograms_3_1()
}
histogram_3_1()
histograms_3_1()
source("~/ai-project/section3_code.R", echo=TRUE)
histograms_3_1()
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
histograms_3_1()
{
library(readr)
library(ggplot2)
library(tidyverse)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
# This section of code read in the feature calculations created in sections 2 code adds
# csv seperated values to columns, and new lines create a new row in a data frame
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
calculated_features_col_names <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
colnames(calculated_features) <- calculated_features_col_names
# had to change custom function to numeric class as for some reason it was character
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.1
# plots histograms for the values for each of the features for each of the images
histograms_3_1 <- function(){
nr_pix_hist <- ggplot(data = calculated_features, aes(nr_pix))+
geom_histogram(binwidth = 2, fill = "grey")+
theme_bw() +
labs(title = "Number of pixels histogram",
x = "Number of pixels",
y = "Frequency")
rows_with_1_hist <- ggplot(data = calculated_features, aes(rows_with_1)) +
geom_histogram(binwidth = 1, fill = "red") +
theme_bw() +
labs(title = "Rows with 1 pixel histogram",
x = "Number of rows with 1 pixel",
y = "Frequency")
cols_with_1_hist <- calculated_features %>%
ggplot(aes(cols_with_1))+
geom_histogram(binwidth = 2, fill = "red")+
theme_bw() +
labs(title = "Columns with 1 histogram",
x = "Number of columns with 1",
y = "Frequency")
rows_with_3p_hist <- calculated_features %>%
ggplot(aes(rows_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Rows with 3 pixels of more histogram",
x = "Number of rows with 3 pixels or more",
y = "Frequency")
cols_with_3p_hist <- calculated_features %>%
ggplot(aes(cols_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Columns with 3 pixels of more histogram",
x = "Number of columns with 3 pixels or more",
y = "Frequency")
aspect_ratio_hist <- calculated_features %>%
ggplot(aes(aspect_ratio))+
geom_histogram(binwidth = 0.1, fill = "orange")+
theme_bw() +
labs(title = "Aspect ratio histogram",
x = "Aspect ratios",
y = "Frequency")
print(nr_pix_hist)
print(rows_with_1_hist)
print(cols_with_1_hist)
print(rows_with_3p_hist)
print(cols_with_3p_hist)
print(aspect_ratio_hist)
}
histograms_3_1()
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
library(tidyverse)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
# This section of code read in the feature calculations created in sections 2 code adds
# csv seperated values to columns, and new lines create a new row in a data frame
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
calculated_features_col_names <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
colnames(calculated_features) <- calculated_features_col_names
# had to change custom function to numeric class as for some reason it was character
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.1
# plots histograms for the values for each of the features for each of the images
histograms_3_1 <- function(){
nr_pix_hist <- ggplot(data = calculated_features, aes(nr_pix))+
geom_histogram(binwidth = 2, fill = "grey")+
theme_bw() +
labs(title = "Number of pixels histogram",
x = "Number of pixels",
y = "Frequency")
rows_with_1_hist <- ggplot(data = calculated_features, aes(rows_with_1)) +
geom_histogram(binwidth = 1, fill = "red") +
theme_bw() +
labs(title = "Rows with 1 pixel histogram",
x = "Number of rows with 1 pixel",
y = "Frequency")
cols_with_1_hist <- calculated_features %>%
ggplot(aes(cols_with_1))+
geom_histogram(binwidth = 2, fill = "red")+
theme_bw() +
labs(title = "Columns with 1 histogram",
x = "Number of columns with 1",
y = "Frequency")
rows_with_3p_hist <- calculated_features %>%
ggplot(aes(rows_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Rows with 3 pixels of more histogram",
x = "Number of rows with 3 pixels or more",
y = "Frequency")
cols_with_3p_hist <- calculated_features %>%
ggplot(aes(cols_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Columns with 3 pixels of more histogram",
x = "Number of columns with 3 pixels or more",
y = "Frequency")
aspect_ratio_hist <- calculated_features %>%
ggplot(aes(aspect_ratio))+
geom_histogram(binwidth = 0.1, fill = "orange")+
theme_bw() +
labs(title = "Aspect ratio histogram",
x = "Aspect ratios",
y = "Frequency")
print(nr_pix_hist)
print(rows_with_1_hist)
print(cols_with_1_hist)
print(rows_with_3p_hist)
print(cols_with_3p_hist)
print(aspect_ratio_hist)
}
histograms_3_1()
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
library(tidyverse)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
# This section of code read in the feature calculations created in sections 2 code adds
# csv seperated values to columns, and new lines create a new row in a data frame
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
calculated_features_col_names <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
colnames(calculated_features) <- calculated_features_col_names
# had to change custom function to numeric class as for some reason it was character
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.1
# plots histograms for the values for each of the features for each of the images
histograms_3_1 <- function(){
nr_pix_hist <- ggplot(data = calculated_features, aes(nr_pix))+
geom_histogram(binwidth = 2, fill = "grey")+
theme_bw() +
labs(title = "Number of pixels histogram",
x = "Number of pixels",
y = "Frequency")
rows_with_1_hist <- ggplot(data = calculated_features, aes(rows_with_1)) +
geom_histogram(binwidth = 1, fill = "red") +
theme_bw() +
labs(title = "Rows with 1 pixel histogram",
x = "Number of rows with 1 pixel",
y = "Frequency")
cols_with_1_hist <- calculated_features %>%
ggplot(aes(cols_with_1))+
geom_histogram(binwidth = 1.5, fill = "red")+
theme_bw() +
labs(title = "Columns with 1 histogram",
x = "Number of columns with 1",
y = "Frequency")
rows_with_3p_hist <- calculated_features %>%
ggplot(aes(rows_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Rows with 3 pixels of more histogram",
x = "Number of rows with 3 pixels or more",
y = "Frequency")
cols_with_3p_hist <- calculated_features %>%
ggplot(aes(cols_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Columns with 3 pixels of more histogram",
x = "Number of columns with 3 pixels or more",
y = "Frequency")
aspect_ratio_hist <- calculated_features %>%
ggplot(aes(aspect_ratio))+
geom_histogram(binwidth = 0.1, fill = "orange")+
theme_bw() +
labs(title = "Aspect ratio histogram",
x = "Aspect ratios",
y = "Frequency")
print(nr_pix_hist)
print(rows_with_1_hist)
print(cols_with_1_hist)
print(rows_with_3p_hist)
print(cols_with_3p_hist)
print(aspect_ratio_hist)
}
histograms_3_1()
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
library(tidyverse)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
# This section of code read in the feature calculations created in sections 2 code adds
# csv seperated values to columns, and new lines create a new row in a data frame
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
calculated_features_col_names <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
colnames(calculated_features) <- calculated_features_col_names
# had to change custom function to numeric class as for some reason it was character
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.1
# plots histograms for the values for each of the features for each of the images
histograms_3_1 <- function(){
nr_pix_hist <- ggplot(data = calculated_features, aes(nr_pix))+
geom_histogram(binwidth = 2, fill = "grey")+
theme_bw() +
labs(title = "Number of pixels histogram",
x = "Number of pixels",
y = "Frequency")
rows_with_1_hist <- ggplot(data = calculated_features, aes(rows_with_1)) +
geom_histogram(binwidth = 1, fill = "red") +
theme_bw() +
labs(title = "Rows with 1 pixel histogram",
x = "Number of rows with 1 pixel",
y = "Frequency")
cols_with_1_hist <- calculated_features %>%
ggplot(aes(cols_with_1))+
geom_histogram(binwidth = 1, fill = "red")+
theme_bw() +
labs(title = "Columns with 1 histogram",
x = "Number of columns with 1",
y = "Frequency")
rows_with_3p_hist <- calculated_features %>%
ggplot(aes(rows_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Rows with 3 pixels of more histogram",
x = "Number of rows with 3 pixels or more",
y = "Frequency")
cols_with_3p_hist <- calculated_features %>%
ggplot(aes(cols_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Columns with 3 pixels of more histogram",
x = "Number of columns with 3 pixels or more",
y = "Frequency")
aspect_ratio_hist <- calculated_features %>%
ggplot(aes(aspect_ratio))+
geom_histogram(binwidth = 0.1, fill = "orange")+
theme_bw() +
labs(title = "Aspect ratio histogram",
x = "Aspect ratios",
y = "Frequency")
print(nr_pix_hist)
print(rows_with_1_hist)
print(cols_with_1_hist)
print(rows_with_3p_hist)
print(cols_with_3p_hist)
print(aspect_ratio_hist)
}
histograms_3_1()
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
