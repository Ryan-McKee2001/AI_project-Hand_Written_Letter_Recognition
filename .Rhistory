col_sums<- c(colSums(current_file))
for(current_index in 1:length(col_sums)){
if( col_sums[current_index] >= 3  ){
cols_greater_than_3_sum <- cols_greater_than_3_sum + 1
}
}
return(cols_greater_than_3_sum)
}
# this gets the aspect ratio width/height
# need to validate aspect ratios are correct a1 calculation and function does not seem to be right
aspect_ratio <- function(current_file){
# get the pixel distance between the top most black pixel and bottom
row_sum_matrix <- rowSums(current_file)
top_element <- 0
bottom_element <- 0
current_index <- 1
while(top_element == 0){
if(row_sum_matrix[current_index] > 0){
top_element <- current_index
break
}
current_index <- current_index + 1
}
# get the pixel index of the bottom most black pixel
current_index <- length(row_sum_matrix)
while(bottom_element == 0){
if(row_sum_matrix[current_index] > 0){
bottom_element <- current_index
break
}
current_index <- current_index - 1
}
height <- bottom_element - top_element
# getting the width
left_most_element <- 0
right_most_element <- 0
col_sum_matrix <- colSums(current_file)
current_index <- 1
while(left_most_element == 0){
if(col_sum_matrix[current_index] > 0){
left_most_element <- current_index
break
}
current_index <- current_index + 1
}
# get the pixel index of the bottom most black pixel
current_index <- length(col_sum_matrix)
while(right_most_element == 0){
if(col_sum_matrix[current_index] > 0){
right_most_element <- current_index
break
}
current_index <- current_index - 1
}
width <- right_most_element - left_most_element
return(width/height)
}
# This returns the number of black pixels with only 1 black pixel neighbour
neigh_1 <- function(current_file){
num_neighbours <- 0
for(row_index in 1:nrow(current_file)){
for(col_index in 1:ncol(current_file)){
if(current_file[row_index, col_index] == 1){
neighbours <- c(0,0,0,0,0,0,0,0)
names(neighbours) <- c("upper left", "upper", "upper right", "left", "right", "bottom left", "bottom", "bottom right")
# checking upper region
if(row_index > 1){
# upper
if(current_file[row_index - 1, col_index] == 1)
neighbours[2] <- 1
# upper left
if(col_index > 1){
if(current_file[row_index - 1, col_index -1] == 1)
neighbours[1] <- 1
}
# upper right
if(col_index < ncol(current_file)){
if(current_file[row_index - 1, col_index + 1] == 1)
neighbours[3] <- 1
}
}
# left
if(col_index > 1){
if(current_file[row_index, col_index - 1])
neighbours[4] <- 1
}
# right
if(col_index < ncol(current_file)){
if(current_file[row_index, col_index +1])
neighbours[5] <- 1
}
# checking the bottom region
if(row_index < nrow(current_file)){
# checking bottom
if(current_file[row_index + 1, col_index] == 1)
neighbours[7] <- 1
# bottom left
if(col_index > 1){
if(current_file[row_index + 1, col_index -1] == 1)
neighbours[6] <- 1
}
# bottom right
if(col_index < ncol(current_file)){
if(current_file[row_index + 1, col_index + 1] == 1)
neighbours[8] <- 1
}
}
if(sum(neighbours) == 1)
num_neighbours <- num_neighbours + 1
}
}
}
return(num_neighbours)
}
# number of black pixels wiTh no black pixel neighbours
# "upper left, upper, and "Upper right"
no_neigh_above <- function(current_file){
num_no_upper_neighbours <- 0
for(row_index in 1:nrow(current_file)){
for(col_index in 1:ncol(current_file)){
if(current_file[row_index, col_index] == 1){
neighbours <- c(0,0,0)
names(neighbours) <- c("upper left", "upper", "upper right")
# checking upper region
if(row_index > 1){
# upper
if(current_file[row_index - 1, col_index] == 1)
neighbours[2] <- 1
# upper left
if(col_index > 1){
if(current_file[row_index - 1, col_index -1] == 1)
neighbours[1] <- 1
}
# upper right
if(col_index < ncol(current_file)){
if(current_file[row_index - 1, col_index + 1] == 1)
neighbours[3] <- 1
}
}
if(sum(neighbours) == 0)
num_no_upper_neighbours <- num_no_upper_neighbours + 1
}
}
}
return(num_no_upper_neighbours)
}
# returns the number of black pixels that have no black
# pixel neighbours "below", "below right", or "below left"
no_neigh_below <- function(current_file){
num_no_lower_neighbours <- 0
for(row_index in 1:nrow(current_file)){
for(col_index in 1:ncol(current_file)){
if(current_file[row_index, col_index] == 1){
neighbours <- c(0,0,0)
names(neighbours) <- c("bottom left", "bottom", "bottom right")
# checking the bottom region
if(row_index < nrow(current_file)){
# checking bottom
if(current_file[row_index + 1, col_index] == 1)
neighbours[2] <- 1
# bottom left
if(col_index > 1){
if(current_file[row_index + 1, col_index -1] == 1)
neighbours[1] <- 1
}
# bottom right
if(col_index < ncol(current_file)){
if(current_file[row_index + 1, col_index + 1] == 1)
neighbours[3] <- 1
}
}
if(sum(neighbours) == 0)
num_no_lower_neighbours <- num_no_lower_neighbours + 1
}
}
}
return(num_no_lower_neighbours)
}
# returns number of pixels that have no black pixel neighbours
# on the left
no_neigh_left <- function(current_file){
num_no_left_neighbours <- 0
for(row_index in 1:nrow(current_file)){
for(col_index in 1:ncol(current_file)){
if(current_file[row_index, col_index] == 1){
neighbours <- c(0,0,0)
names(neighbours) <- c("upper left", "left", "bottom left")
# checking the left
if(col_index > 1){
# checking left
if(current_file[row_index, col_index - 1] == 1)
neighbours[2] <- 1
# bottom left
if(row_index < nrow(current_file)){
if(current_file[row_index + 1, col_index -1] == 1)
neighbours[3] <- 1
}
# top left
if(col_index < ncol(current_file)){
if(current_file[row_index - 1, col_index - 1] == 1)
neighbours[1] <- 1
}
}
if(sum(neighbours) == 0)
num_no_left_neighbours <- num_no_left_neighbours + 1
}
}
}
return(num_no_left_neighbours)
}
# returns number of pixels that have no black pixel neighbours
# on the right
no_neigh_right <- function(current_file){
num_no_right_neighbours <- 0
for(row_index in 1:nrow(current_file)){
for(col_index in 1:ncol(current_file)){
if(current_file[row_index, col_index] == 1){
neighbours <- c(0,0,0)
names(neighbours) <- c("upper right", "right", "bottom right")
# checking the right
if(col_index < ncol(current_file)){
# checking left
if(current_file[row_index, col_index + 1] == 1)
neighbours[2] <- 1
# bottom right
if(row_index < nrow(current_file)){
if(current_file[row_index + 1, col_index + 1] == 1)
neighbours[3] <- 1
}
# top right
if(col_index < ncol(current_file)){
if(current_file[row_index - 1, col_index + 1] == 1)
neighbours[1] <- 1
}
}
if(sum(neighbours) == 0)
num_no_right_neighbours <- num_no_right_neighbours + 1
}
}
}
return(num_no_right_neighbours)
}
# returns number of black pixels that have no
# black pixel neighbours right or left
no_neigh_horiz <- function(current_file){
num_no_horiz_neighbours <- 0
for(row_index in 1:nrow(current_file)){
for(col_index in 1:ncol(current_file)){
if(current_file[row_index, col_index] == 1){
neighbours <- c(0,0)
names(neighbours) <- c("left", "right")
# check left black pixel
# neighbour
if(col_index > 1){
if(current_file[row_index, col_index - 1])
neighbours[1] <- 1
}
if(col_index < ncol(current_file)){
if(current_file[row_index, col_index +1])
neighbours[2] <- 1
}
if(sum(neighbours) == 0)
num_no_horiz_neighbours <- num_no_horiz_neighbours + 1
}
}
}
return(num_no_horiz_neighbours)
}
# returns number of black pixels that have no
# black pixels neighbours upper or lower
no_neigh_vert <- function(current_file){
num_no_vert_neighbours <- 0
for(row_index in 1:nrow(current_file)){
for(col_index in 1:ncol(current_file)){
if(current_file[row_index, col_index] == 1){
neighbours <- c(0,0)
names(neighbours) <- c("above", "below")
# check pixels above
if(row_index < nrow(current_file)){
if(current_file[row_index + 1, col_index] == 1)
neighbours[1] <- 1
}
# check pixels below
if(row_index < nrow(current_file))
if(current_file[row_index - 1, col_index] == 1)
neighbours[2] <- 1
if(sum(neighbours) == 0)
num_no_vert_neighbours <- num_no_vert_neighbours + 1
}
}
}
return(num_no_vert_neighbours)
}
connected_areas <- function(current_file){
rast <- raster(current_file)
clump <- clump(rast1, directions=8)
return(maxValue(clump1))
}
eyes <- function(current_file){
}
# for custom I think I should check for enclosed area.
# this would allow me to distinguish between letters
# and exclude an image from being a smliey face or some of the
# letters
custom <- function(current_file){
}
for(current_index in 1:length(data_folder))
{
current_file_name <- data_folder[current_index]
current_file_path <- paste(folder_path, current_file_name, sep = "")
current_file <- as.matrix(read.table(file = current_file_path, header = F, sep = ","))
calculated_features = matrix(ncol = 18, nrow = 1)
colnames(calculated_features) <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
calculated_features[1,1] <- getFileLabel(current_file_name) # works
calculated_features[1,2] <- getIndex(current_file_name) # works
calculated_features[1,3] <- nr_pix(current_file) # works
calculated_features[1,4] <- rows_with_1(current_file) # works
calculated_features[1,5] <- cols_with_1(current_file) # works
calculated_features[1,6] <- rows_with_3p(current_file) # works
calculated_features[1,7] <- cols_with_3p(current_file) # works
calculated_features[1,8] <- aspect_ratio(current_file) # works
calculated_features[1,9] <- neigh_1(current_file) # not working, needs testing
calculated_features[1,10] <- no_neigh_above(current_file) # works
calculated_features[1,11] <- no_neigh_below(current_file) # works
calculated_features[1,12] <- no_neigh_left(current_file) # works
calculated_features[1,13] <- no_neigh_right(current_file) # works
calculated_features[1,14] <- no_neigh_horiz(current_file) # works
calculated_features[1,15] <- no_neigh_vert(current_file) # works
calculated_features[1,16] <- connected_areas(current_file)
#calculated_features[1,17] <- eyes(current_file)
#calculated_features[1,18] <- custome(current_file)
#print(calculated_features[1,9])
}
}
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
?read.table()
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
?read.table
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
?clump
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Feature engineering calculations script.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source(./section1_code.R)
source(section1_code.R)
source('section1_code.R')
source('./section1_code.R')
source('./section2_code.R')
source('C:\Users\ryanm\OneDrive\Music\Documents\ai-project\section1_code.R')
source('./section1_code.R')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{library(readr)
library(utile.tables)
# * This object stores a list of file names from
# the folder containing the PGM files
# Path should be contain the file path to the
# folder containing the PGM images *
data_files <- list.files(path = "ai_dataset")
# * working folder should be equal to the file path
# to the folder containing PGM files and have a '/'
# at the end so it can be used to access individual
# file paths for image files in the data_files list *
working_folder <- "ai_dataset/"
# iterates through each file in the data_files list
for(index in 1:length(data_files)){
# stores name of the file in the list at the current index
current_file <- data_files[index]
# creates the file path for the current file by pasting the working folder
# path and the current files name
current_file_path <- paste(working_folder, current_file, sep = "")
# This reads the csv file skipping 4 lines of data that is not
# needed and adding this data to a matrix
pgmFile <- read_lines(file = current_file_path, skip = 4)
imageMatrix <- matrix(pgmFile, nrow = 18, ncol = 18)
# loops through image matrix elements and changes the value
# of elements that are below the value of 128 to be equal to
# 1.
# Then changes the element values greater than or equal to 128
# to be equal to 0
for(row in 1:nrow(imageMatrix))
{
for(col in 1:ncol(imageMatrix))
{
if(imageMatrix[row,col] < 128)
{
imageMatrix[row,col] = 1
}
else
{
imageMatrix[row,col] = 0
}
}
}
imageMatrix <- t(imageMatrix)
# * To change the folder that the csv files are being written to just change the first argument in the paste function to the new folder path + '/' *
# this writes the imageMatrix to a new csv file in a folder path specified in the second argument of write.table
# it also converts the file type of csv file being created to go from .pgm to .csv using the gsub function
write.table(imageMatrix, file = paste("csv_ai_dataset/", gsub('.pgm', '.csv', data_files[index]), sep = ""), col.names = F, row.names = F, sep = ",", quote = FALSE)
}
}
?utile.tables
?library(utile.tables)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
?c()
?c
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
?data.frame()
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
colnames(letter_stats_for_calculated_features) <- c("mean", "median", "standard deviation")
print(letter_stats_for_calculated_features)
print_letter_features_mean <- function(letters_calculated_features){
for(x in colnames(calculated_features)){
if(x != "Label" && x != "Index"){
letters <- calculated_features[c(1:80), x]
non_letters <- calculated_features[c(81, 140), x]
current_hist <- hist(letters)
print(current_hist)
}
}
}
# print(mean(letters_calculated_features[,3:18]))
print_letter_features_mean(letters_calculated_features)
}
source("~/ai-project/section3_code.R", echo=TRUE)
