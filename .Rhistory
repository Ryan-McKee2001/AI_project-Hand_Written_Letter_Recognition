"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.2
letters_calculated_features <- calculated_features[1:80,]
non_letters_calculated_features<- calculated_features[81:140,]
letters_calculated_features[, 18] <- as.numeric(letters_calculated_features[ , 18])
non_letters_calculated_features[ , 18] <- as.numeric(non_letters_calculated_features[ , 18])
# # get the mean of each column
letters_mean <- c(colMeans(letters_calculated_features[ , 3:18]))
non_letters_mean <- c(colMeans(non_letters_calculated_features[ , 3:18]))
# get the medians of each column
letters_median <- c(colMedians(as.matrix(letters_calculated_features[ , 3:18])))
non_letters_median <- c(colMedians(as.matrix(non_letters_calculated_features[ , 3:18])))
#get the standard deviation of each column
letters_sd <- colSds(as.matrix(letters_calculated_features[, 3:18][sapply(letters_calculated_features[ , 3:18 ], is.numeric)]))
non_letters_sd <- colSds(as.matrix(non_letters_calculated_features[ , 3:18][sapply(non_letters_calculated_features[ , 3:18], is.numeric)]))
# printing tables containing the results for standard_deviation, mean, median for both letters and
# non letters.
# source for making tables: https://www.youtube.com/watch?v=hNgeVLotABg
table = matrix(NA, nrow = 0, ncol = 16)
colnames(table) = c("nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
table <- rbind(table, letters_mean)
table <- rbind(table, non_letters_mean)
table <- rbind(table, letters_median)
table <- rbind(table, non_letters_median)
table <- rbind(table, letters_sd)
table <- rbind(table, non_letters_sd)
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations in table format")
print(features_table)
}
source("~/ai-project/section3_code.R", echo=TRUE)
{
library(readr)
library(ggplot2)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
colnames(calculated_features) <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.2
letters_calculated_features <- calculated_features[1:80,]
non_letters_calculated_features<- calculated_features[81:140,]
letters_calculated_features[, 18] <- as.numeric(letters_calculated_features[ , 18])
non_letters_calculated_features[ , 18] <- as.numeric(non_letters_calculated_features[ , 18])
# # get the mean of each column
letters_mean <- c(colMeans(letters_calculated_features[ , 3:18]))
non_letters_mean <- c(colMeans(non_letters_calculated_features[ , 3:18]))
# get the medians of each column
letters_median <- c(colMedians(as.matrix(letters_calculated_features[ , 3:18])))
non_letters_median <- c(colMedians(as.matrix(non_letters_calculated_features[ , 3:18])))
#get the standard deviation of each column
letters_sd <- colSds(as.matrix(letters_calculated_features[, 3:18][sapply(letters_calculated_features[ , 3:18 ], is.numeric)]))
non_letters_sd <- colSds(as.matrix(non_letters_calculated_features[ , 3:18][sapply(non_letters_calculated_features[ , 3:18], is.numeric)]))
# printing tables containing the results for standard_deviation, mean, median for both letters and
# non letters.
# source for making tables: https://www.youtube.com/watch?v=hNgeVLotABg
table = matrix(NA, nrow = 16, ncol = 0)
rownames(table) = c("nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
table <- cbind(table, letters_mean)
table <- cbind(table, non_letters_mean)
table <- cbind(table, letters_median)
table <- cbind(table, non_letters_median)
table <- cbind(table, letters_sd)
table <- cbind(table, non_letters_sd)
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations")
print(features_table)
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
colnames(calculated_features) <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.2
letters_calculated_features <- calculated_features[1:80,]
non_letters_calculated_features<- calculated_features[81:140,]
letters_calculated_features[, 18] <- as.numeric(letters_calculated_features[ , 18])
non_letters_calculated_features[ , 18] <- as.numeric(non_letters_calculated_features[ , 18])
# # get the mean of each column
letters_mean <- c(colMeans(letters_calculated_features[ , 3:18]))
non_letters_mean <- c(colMeans(non_letters_calculated_features[ , 3:18]))
# get the medians of each column
letters_median <- c(colMedians(as.matrix(letters_calculated_features[ , 3:18])))
non_letters_median <- c(colMedians(as.matrix(non_letters_calculated_features[ , 3:18])))
#get the standard deviation of each column
letters_sd <- colSds(as.matrix(letters_calculated_features[, 3:18][sapply(letters_calculated_features[ , 3:18 ], is.numeric)]))
non_letters_sd <- colSds(as.matrix(non_letters_calculated_features[ , 3:18][sapply(non_letters_calculated_features[ , 3:18], is.numeric)]))
# printing tables containing the results for standard_deviation, mean, median for both letters and
# non letters.
# source for making tables: https://www.youtube.com/watch?v=hNgeVLotABg
table = matrix(NA, nrow = 16, ncol = 0)
rownames(table) = c("nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
table <- cbind(table, letters_mean)
table <- cbind(table, non_letters_mean)
table <- cbind(table, letters_median)
table <- cbind(table, non_letters_median)
table <- cbind(table, letters_sd)
table <- cbind(table, non_letters_sd)
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations")
print(features_table)
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/section3_code.R", echo=TRUE)
qplot(x = letter_mean, geom = "boxplot")
qplot(x=letters_mean, geom = "boxplot")
qplot(x = letters_mean, y = "", geom = "boxplot")
qplot(x = letters_mean, y = "", geom = "boxplot", col = I(darkblue))
qplot(x = letters_mean, y = "", geom = "boxplot", col = I("darkblue"), fill = I("lightblue"))
qplot(x = letters_mean, y = "", geom = "boxplot", col = I("darkblue"), fill = I("lightblue"), main = "letter and non letter means")
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
warnings()
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
?ggplot
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations")
warning()
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
print(cols_with_1_letters)
cols_with_1_letters
source("~/ai-project/section3_code.R", echo=TRUE)
print(cols_with_1_letters)
print(cols_with_1_nonletters)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
?hist
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
?raster
source("~/ai-project/section2_code.R", echo=TRUE)
install.package(spatial.tools)
install.packages("spatial.tools")
?raster()
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
?extend()
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
colnames(calculated_features) <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.2
letters_calculated_features <- calculated_features[1:80,]
non_letters_calculated_features<- calculated_features[81:140,]
letters_calculated_features[, 18] <- as.numeric(letters_calculated_features[ , 18])
non_letters_calculated_features[ , 18] <- as.numeric(non_letters_calculated_features[ , 18])
# # get the mean of each column
letters_mean <- c(colMeans(letters_calculated_features[ , 3:18]))
non_letters_mean <- c(colMeans(non_letters_calculated_features[ , 3:18]))
# get the medians of each column
letters_median <- c(colMedians(as.matrix(letters_calculated_features[ , 3:18])))
non_letters_median <- c(colMedians(as.matrix(non_letters_calculated_features[ , 3:18])))
#get the standard deviation of each column
letters_sd <- colSds(as.matrix(letters_calculated_features[, 3:18][sapply(letters_calculated_features[ , 3:18 ], is.numeric)]))
non_letters_sd <- colSds(as.matrix(non_letters_calculated_features[ , 3:18][sapply(non_letters_calculated_features[ , 3:18], is.numeric)]))
# printing tables containing the results for standard_deviation, mean, median for both letters and
# non letters.
# source for making tables: https://www.youtube.com/watch?v=hNgeVLotABg
table = matrix(NA, nrow = 16, ncol = 0)
rownames(table) = c("nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
table <- cbind(table, letters_mean)
table <- cbind(table, non_letters_mean)
table <- cbind(table, letters_median)
table <- cbind(table, non_letters_median)
table <- cbind(table, letters_sd)
table <- cbind(table, non_letters_sd)
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations")
print(features_table)
# box plot for comparing all the summary data, to show in report
summary_boxplot <- boxplot(letters_mean, non_letters_mean, letters_median, non_letters_median, letters_sd, non_letters_sd,
main = "summary data comparisons",
at = c(1,2,3,4,5,6),
names = c("letter mean", "non letter mean", "letters median", "non letters median", "letters standard deviation", "non letters standard deviation"),
las = 2,
col = c("orange","red"),
border = "brown",
horizontal = TRUE,
notch = FALSE
)
}
?rmarkdown
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
letter_stats_for_calculated_features
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
warnings()
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
calculated_features
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
library(tidyverse)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
# This section of code read in the feature calculations created in sections 2 code adds
# csv seperated values to columns, and new lines create a new row in a data frame
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
calculated_features_col_names <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
colnames(calculated_features) <- calculated_features_col_names
# had to change custom function to numeric class as for some reason it was character
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.1
# plots histograms for the values for each of the features for each of the images
histograms_3_1 <- function(){
nr_pix_hist <- ggplot(data = calculated_features, aes(nr_pix))+
geom_histogram(binwidth = 2, fill = "grey")+
theme_bw() +
labs(title = "Number of pixels histogram",
x = "Number of pixels",
y = "Frequency")
rows_with_1_hist <- ggplot(data = calculated_features, aes(rows_with_1)) +
geom_histogram(binwidth = 1, fill = "red") +
theme_bw() +
labs(title = "Rows with 1 pixel histogram",
x = "Number of rows with 1 pixel",
y = "Frequency")
cols_with_1_hist <- calculated_features %>%
ggplot(aes(cols_with_1))+
geom_histogram(binwidth = 1, fill = "red")+
theme_bw() +
labs(title = "Columns with 1 histogram",
x = "Number of columns with 1",
y = "Frequency")
rows_with_3p_hist <- calculated_features %>%
ggplot(aes(rows_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Rows with 3 pixels of more histogram",
x = "Number of rows with 3 pixels or more",
y = "Frequency")
cols_with_3p_hist <- calculated_features %>%
ggplot(aes(cols_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Columns with 3 pixels of more histogram",
x = "Number of columns with 3 pixels or more",
y = "Frequency")
aspect_ratio_hist <- calculated_features %>%
ggplot(aes(aspect_ratio))+
geom_histogram(binwidth = 0.1, fill = "orange")+
theme_bw() +
labs(title = "Aspect ratio histogram",
x = "Aspect ratios",
y = "Frequency")
print(nr_pix_hist)
print(rows_with_1_hist)
print(cols_with_1_hist)
print(rows_with_3p_hist)
print(cols_with_3p_hist)
print(aspect_ratio_hist)
}
histograms_3_1()
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
library(tidyverse)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
# This section of code read in the feature calculations created in sections 2 code adds
# csv seperated values to columns, and new lines create a new row in a data frame
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
calculated_features_col_names <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
colnames(calculated_features) <- calculated_features_col_names
# had to change custom function to numeric class as for some reason it was character
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.1
# plots histograms for the values for each of the features for each of the images
histograms_3_1 <- function(){
nr_pix_hist <- ggplot(data = calculated_features, aes(nr_pix))+
geom_histogram(binwidth = 2, fill = "grey")+
theme_bw() +
labs(title = "Number of pixels histogram",
x = "Number of pixels",
y = "Frequency")
rows_with_1_hist <- ggplot(data = calculated_features, aes(rows_with_1)) +
geom_histogram(binwidth = 1, fill = "red") +
theme_bw() +
labs(title = "Rows with 1 pixel histogram",
x = "Number of rows with 1 pixel",
y = "Frequency")
cols_with_1_hist <- calculated_features %>%
ggplot(aes(cols_with_1))+
geom_histogram(binwidth = 1, fill = "red")+
theme_bw() +
labs(title = "Columns with 1 histogram",
x = "Number of columns with 1",
y = "Frequency")
rows_with_3p_hist <- calculated_features %>%
ggplot(aes(rows_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Rows with 3 pixels of more histogram",
x = "Number of rows with 3 pixels or more",
y = "Frequency")
cols_with_3p_hist <- calculated_features %>%
ggplot(aes(cols_with_3p))+
geom_histogram(binwidth = 1, fill = "blue")+
theme_bw() +
labs(title = "Columns with 3 pixels of more histogram",
x = "Number of columns with 3 pixels or more",
y = "Frequency")
aspect_ratio_hist <- calculated_features %>%
ggplot(aes(aspect_ratio))+
geom_histogram(binwidth = 0.1, fill = "orange")+
theme_bw() +
labs(title = "Aspect ratio histogram",
x = "Aspect ratios",
y = "Frequency")
print(nr_pix_hist)
print(rows_with_1_hist)
print(cols_with_1_hist)
print(rows_with_3p_hist)
print(cols_with_3p_hist)
print(aspect_ratio_hist)
}
histograms_3_1()
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
