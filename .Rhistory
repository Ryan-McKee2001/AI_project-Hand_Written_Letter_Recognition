source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source("~/ai-project/Statistical_analyses.R", echo=TRUE)
source(./section1_code.R)
source(section1_code.R)
source('section1_code.R')
source('./section1_code.R')
source('./section2_code.R')
source('C:\Users\ryanm\OneDrive\Music\Documents\ai-project\section1_code.R')
source('./section1_code.R')
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{library(readr)
library(utile.tables)
# * This object stores a list of file names from
# the folder containing the PGM files
# Path should be contain the file path to the
# folder containing the PGM images *
data_files <- list.files(path = "ai_dataset")
# * working folder should be equal to the file path
# to the folder containing PGM files and have a '/'
# at the end so it can be used to access individual
# file paths for image files in the data_files list *
working_folder <- "ai_dataset/"
# iterates through each file in the data_files list
for(index in 1:length(data_files)){
# stores name of the file in the list at the current index
current_file <- data_files[index]
# creates the file path for the current file by pasting the working folder
# path and the current files name
current_file_path <- paste(working_folder, current_file, sep = "")
# This reads the csv file skipping 4 lines of data that is not
# needed and adding this data to a matrix
pgmFile <- read_lines(file = current_file_path, skip = 4)
imageMatrix <- matrix(pgmFile, nrow = 18, ncol = 18)
# loops through image matrix elements and changes the value
# of elements that are below the value of 128 to be equal to
# 1.
# Then changes the element values greater than or equal to 128
# to be equal to 0
for(row in 1:nrow(imageMatrix))
{
for(col in 1:ncol(imageMatrix))
{
if(imageMatrix[row,col] < 128)
{
imageMatrix[row,col] = 1
}
else
{
imageMatrix[row,col] = 0
}
}
}
imageMatrix <- t(imageMatrix)
# * To change the folder that the csv files are being written to just change the first argument in the paste function to the new folder path + '/' *
# this writes the imageMatrix to a new csv file in a folder path specified in the second argument of write.table
# it also converts the file type of csv file being created to go from .pgm to .csv using the gsub function
write.table(imageMatrix, file = paste("csv_ai_dataset/", gsub('.pgm', '.csv', data_files[index]), sep = ""), col.names = F, row.names = F, sep = ",", quote = FALSE)
}
}
?utile.tables
?library(utile.tables)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
?c()
?c
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
?data.frame()
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
colnames(letter_stats_for_calculated_features) <- c("mean", "median", "standard deviation")
print(letter_stats_for_calculated_features)
print_letter_features_mean <- function(letters_calculated_features){
for(x in colnames(calculated_features)){
if(x != "Label" && x != "Index"){
letters <- calculated_features[c(1:80), x]
non_letters <- calculated_features[c(81, 140), x]
current_hist <- hist(letters)
print(current_hist)
}
}
}
# print(mean(letters_calculated_features[,3:18]))
print_letter_features_mean(letters_calculated_features)
}
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section2_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
means
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
means
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
means
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
{
library(readr)
library(ggplot2)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
colnames(calculated_features) <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.2
letters_calculated_features <- calculated_features[1:80,]
non_letters_calculated_features<- calculated_features[81:140,]
letters_calculated_features[, 18] <- as.numeric(letters_calculated_features[ , 18])
non_letters_calculated_features[ , 18] <- as.numeric(non_letters_calculated_features[ , 18])
# # get the mean of each column
letters_mean <- c(colMeans(letters_calculated_features[ , 3:18]))
non_letters_mean <- c(colMeans(non_letters_calculated_features[ , 3:18]))
# get the medians of each column
letters_median <- c(colMedians(as.matrix(letters_calculated_features[ , 3:18])))
non_letters_median <- c(colMedians(as.matrix(non_letters_calculated_features[ , 3:18])))
#get the standard deviation of each column
letters_sd <- colSds(as.matrix(letters_calculated_features[, 3:18][sapply(letters_calculated_features[ , 3:18 ], is.numeric)]))
non_letters_sd <- colSds(as.matrix(non_letters_calculated_features[ , 3:18][sapply(non_letters_calculated_features[ , 3:18], is.numeric)]))
# printing tables containing the results for standard_deviation, mean, median for both letters and
# non letters.
# source for making tables: https://www.youtube.com/watch?v=hNgeVLotABg
table = matrix(NA, nrow = 0, ncol = 16)
colnames(means) = c("nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
table <- rbind(table, letters_mean)
table <- rbind(table, non_letters_mean)
table <- rbind(table, letters_median)
table <- rbind(table, non_letters_median)
table <- rbind(table, letters_sd)
table <- rbind(table, non_letters_sd)
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations in table format")
print(features_table)
}
install.packages("rmarkdown")
{
library(readr)
library(ggplot2)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
colnames(calculated_features) <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.2
letters_calculated_features <- calculated_features[1:80,]
non_letters_calculated_features<- calculated_features[81:140,]
letters_calculated_features[, 18] <- as.numeric(letters_calculated_features[ , 18])
non_letters_calculated_features[ , 18] <- as.numeric(non_letters_calculated_features[ , 18])
# # get the mean of each column
letters_mean <- c(colMeans(letters_calculated_features[ , 3:18]))
non_letters_mean <- c(colMeans(non_letters_calculated_features[ , 3:18]))
# get the medians of each column
letters_median <- c(colMedians(as.matrix(letters_calculated_features[ , 3:18])))
non_letters_median <- c(colMedians(as.matrix(non_letters_calculated_features[ , 3:18])))
#get the standard deviation of each column
letters_sd <- colSds(as.matrix(letters_calculated_features[, 3:18][sapply(letters_calculated_features[ , 3:18 ], is.numeric)]))
non_letters_sd <- colSds(as.matrix(non_letters_calculated_features[ , 3:18][sapply(non_letters_calculated_features[ , 3:18], is.numeric)]))
# printing tables containing the results for standard_deviation, mean, median for both letters and
# non letters.
# source for making tables: https://www.youtube.com/watch?v=hNgeVLotABg
table = matrix(NA, nrow = 0, ncol = 16)
colnames(means) = c("nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
table <- rbind(table, letters_mean)
table <- rbind(table, non_letters_mean)
table <- rbind(table, letters_median)
table <- rbind(table, non_letters_median)
table <- rbind(table, letters_sd)
table <- rbind(table, non_letters_sd)
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations in table format")
print(features_table)
}
{
library(readr)
library(ggplot2)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
colnames(calculated_features) <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.2
letters_calculated_features <- calculated_features[1:80,]
non_letters_calculated_features<- calculated_features[81:140,]
letters_calculated_features[, 18] <- as.numeric(letters_calculated_features[ , 18])
non_letters_calculated_features[ , 18] <- as.numeric(non_letters_calculated_features[ , 18])
# # get the mean of each column
letters_mean <- c(colMeans(letters_calculated_features[ , 3:18]))
non_letters_mean <- c(colMeans(non_letters_calculated_features[ , 3:18]))
# get the medians of each column
letters_median <- c(colMedians(as.matrix(letters_calculated_features[ , 3:18])))
non_letters_median <- c(colMedians(as.matrix(non_letters_calculated_features[ , 3:18])))
#get the standard deviation of each column
letters_sd <- colSds(as.matrix(letters_calculated_features[, 3:18][sapply(letters_calculated_features[ , 3:18 ], is.numeric)]))
non_letters_sd <- colSds(as.matrix(non_letters_calculated_features[ , 3:18][sapply(non_letters_calculated_features[ , 3:18], is.numeric)]))
# printing tables containing the results for standard_deviation, mean, median for both letters and
# non letters.
# source for making tables: https://www.youtube.com/watch?v=hNgeVLotABg
table = matrix(NA, nrow = 0, ncol = 16)
colnames(table) = c("nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
table <- rbind(table, letters_mean)
table <- rbind(table, non_letters_mean)
table <- rbind(table, letters_median)
table <- rbind(table, non_letters_median)
table <- rbind(table, letters_sd)
table <- rbind(table, non_letters_sd)
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations in table format")
print(features_table)
}
source("~/ai-project/section3_code.R", echo=TRUE)
{
library(readr)
library(ggplot2)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
colnames(calculated_features) <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.2
letters_calculated_features <- calculated_features[1:80,]
non_letters_calculated_features<- calculated_features[81:140,]
letters_calculated_features[, 18] <- as.numeric(letters_calculated_features[ , 18])
non_letters_calculated_features[ , 18] <- as.numeric(non_letters_calculated_features[ , 18])
# # get the mean of each column
letters_mean <- c(colMeans(letters_calculated_features[ , 3:18]))
non_letters_mean <- c(colMeans(non_letters_calculated_features[ , 3:18]))
# get the medians of each column
letters_median <- c(colMedians(as.matrix(letters_calculated_features[ , 3:18])))
non_letters_median <- c(colMedians(as.matrix(non_letters_calculated_features[ , 3:18])))
#get the standard deviation of each column
letters_sd <- colSds(as.matrix(letters_calculated_features[, 3:18][sapply(letters_calculated_features[ , 3:18 ], is.numeric)]))
non_letters_sd <- colSds(as.matrix(non_letters_calculated_features[ , 3:18][sapply(non_letters_calculated_features[ , 3:18], is.numeric)]))
# printing tables containing the results for standard_deviation, mean, median for both letters and
# non letters.
# source for making tables: https://www.youtube.com/watch?v=hNgeVLotABg
table = matrix(NA, nrow = 16, ncol = 0)
rownames(table) = c("nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
table <- cbind(table, letters_mean)
table <- cbind(table, non_letters_mean)
table <- cbind(table, letters_median)
table <- cbind(table, non_letters_median)
table <- cbind(table, letters_sd)
table <- cbind(table, non_letters_sd)
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations")
print(features_table)
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
{
library(readr)
library(ggplot2)
# matrix stats has functions for getting colMedian and standard deviation
library(matrixStats)
library(knitr) # using this to make a table for my report.
mydata <- read.csv("40294886_features.csv", row.names = NULL)
calculated_features <- data.frame(mydata)
colnames(calculated_features) <- c("Label", "Index", "nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
mydata[ , 3:18] <- as.numeric(mydata[ , 3,18])
# 3.2
letters_calculated_features <- calculated_features[1:80,]
non_letters_calculated_features<- calculated_features[81:140,]
letters_calculated_features[, 18] <- as.numeric(letters_calculated_features[ , 18])
non_letters_calculated_features[ , 18] <- as.numeric(non_letters_calculated_features[ , 18])
# # get the mean of each column
letters_mean <- c(colMeans(letters_calculated_features[ , 3:18]))
non_letters_mean <- c(colMeans(non_letters_calculated_features[ , 3:18]))
# get the medians of each column
letters_median <- c(colMedians(as.matrix(letters_calculated_features[ , 3:18])))
non_letters_median <- c(colMedians(as.matrix(non_letters_calculated_features[ , 3:18])))
#get the standard deviation of each column
letters_sd <- colSds(as.matrix(letters_calculated_features[, 3:18][sapply(letters_calculated_features[ , 3:18 ], is.numeric)]))
non_letters_sd <- colSds(as.matrix(non_letters_calculated_features[ , 3:18][sapply(non_letters_calculated_features[ , 3:18], is.numeric)]))
# printing tables containing the results for standard_deviation, mean, median for both letters and
# non letters.
# source for making tables: https://www.youtube.com/watch?v=hNgeVLotABg
table = matrix(NA, nrow = 16, ncol = 0)
rownames(table) = c("nr_pix", "rows_with_1", "cols_with_1",
"rows_with_3p", "cols_with_3p", "aspect_ratio", "neigh_1",
"no_neigh_above","no_neigh_below","no_neigh_left","no_neigh_right",
"no_neigh_horiz", "no_neigh_vert","connected_areas","eyes","custom")
table <- cbind(table, letters_mean)
table <- cbind(table, non_letters_mean)
table <- cbind(table, letters_median)
table <- cbind(table, non_letters_median)
table <- cbind(table, letters_sd)
table <- cbind(table, non_letters_sd)
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations")
print(features_table)
}
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
source("~/ai-project/section3_code.R", echo=TRUE)
qplot(x = letter_mean, geom = "boxplot")
qplot(x=letters_mean, geom = "boxplot")
qplot(x = letters_mean, y = "", geom = "boxplot")
qplot(x = letters_mean, y = "", geom = "boxplot", col = I(darkblue))
qplot(x = letters_mean, y = "", geom = "boxplot", col = I("darkblue"), fill = I("lightblue"))
qplot(x = letters_mean, y = "", geom = "boxplot", col = I("darkblue"), fill = I("lightblue"), main = "letter and non letter means")
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
warnings()
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
?ggplot
features_table<-kable(table, caption = "This table shows the letter and non letters mean, median and standard deviation for each of the feature calculations")
warning()
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
print(cols_with_1_letters)
cols_with_1_letters
source("~/ai-project/section3_code.R", echo=TRUE)
print(cols_with_1_letters)
print(cols_with_1_nonletters)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
?hist
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/section3_code.R", echo=TRUE)
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
?raster
source("~/ai-project/section2_code.R", echo=TRUE)
install.package(spatial.tools)
install.packages("spatial.tools")
?raster()
source("~/ai-project/csc2062_a2_Ryan_McKee_40294886.Rmd")
